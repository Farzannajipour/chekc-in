type Booking {
  bookingCode: String
  contactDetails: [Contact]
  itinerary: Itinerary
  passengers: [Passenger]
}

input CheckinInput {
  bookingCode: String!
  lastName: String!
  firstName: String
}

type Query {
  booking(bookingCode: String!): Booking
}

type Mutation {
  checkin(input: CheckinInput!): CheckinResponse
  login(input: CheckinInput!): LoginResponse
}

type CheckinResponse {
  success: Boolean
  message: String
  booking: Booking
}

type LoginResponse {
  success: Boolean
  message: String
  passenger: Passenger
}

type Contact {
  address: String
}

type Itinerary {
  type: String
  connections: [Connection]
}

type Connection {
  id: Int
  duration: String
  origin: Location
  destination: Location
  segments: [Segment]
}

type Location {
  IATACode: String
  name: String
  city: City
}

type City {
  IATACode: String
  name: String
  country: Country
}

type Country {
  code: String
  name: String
}

type Segment {
  id: Int
  type: String
  informational: Boolean
  departFrom: Location
  arriveOn: Location
  marketingFlight: Flight
}

type Flight {
  number: String
  carrier: Carrier
  status: Status
  numberOfStops: Int
  sellingClass: SellingClass
  operatingFlight: OperatingFlight
}


type Carrier {
  code: String
  name: String
}

type Status {
  code: String
  name: String
}

type SellingClass {
  code: String
  name: String
}

type OperatingFlight {
  number: String
  carrier: Carrier
  duration: String
  flown: Boolean
  checkInStart: String
  localCheckInStart: String
  checkInEnd: String
  localCheckInEnd: String
  scheduledArrival: String
  localScheduledArrival: String
  scheduledDeparture: String
  localScheduledDeparture: String
  arrivalTerminal: Terminal
  cabin: Cabin
  equipment: Equipment
}

type Terminal {
  name: String
}

type Cabin {
  code: String
  name: String
}

type Equipment {
  code: String
  name: String
}

type Passenger {
  id: Int
  firstName: String
  lastName: String
  title: Title
}

type Title {
  code: String
  name: String
}
